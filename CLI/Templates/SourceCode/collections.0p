use std;

#const __FILENAME__ 		"collections"
#const __FILENAME_FULL__ 	"collections.0p"
#const __LIB_NAME__			"Collections"

// Begin __COLLECTIONS_LIB_EXPORTS__
#const __COLLECTIONS_LIB_EXPORTS__() => {

#const __ACCESSOR_SYM__		'.'

#const __LLIST_TCODE__ 		1706029405
#const __STACK_TCODE__ 		1910834486
#const __QUEUE_TCODE__ 		1783385193

	__collections_tcode_set__ = {
		[__LLIST_TCODE__]=void,
		[__STACK_TCODE__]=void,
		[__QUEUE_TCODE__]=void
	};

	__is_collections_lib_type = obj =>
		std.containsMember(obj, "typeCode") && 
		std.isMethod(obj.typeCode) && 
		__collections_tcode_set__.contains(obj.typeCode());

	__construct_id_path = strings => {
		sb = "";
		i = 0;
		while (i < strings.length()) {
			sb += strings[i];
			if (i != strings.length() - 1) {
				sb += __ACCESSOR_SYM__;
			}
			i += 1;
		}
		return sb;
	};

	__construct_exception_message = (idPath, msg) => {
		idPath = __construct_id_path(idPath);
		return idPath + ": " + msg;
	};

	// Linked list implementation
	// A dynamic data structure that stores elements as nodes in a structure resembling a chain.
	//
	LinkedList_t = () => {
		_len = 0;
		_head = void; // First node (index 0)
		_tail = void; // Last node
		
		Node_t = value => {
			value = value,
			prev = void,
			next = void
		};

		Node_t += (value, prev, next) => {
			value = value,
			prev = prev,
			next = next
		};

		Enumerator_t = stn => {
			isDisposed = false;
			cnode = stn;
			skip = true;
			return {
				next = () => {
					if (isDisposed) {
						throw __construct_exception_message([nameof(LinkedList_t), nameof(Enumerator_t)], "Enumerator is already disposed");
					}
					b = void;
					// Reached end?
					if (cnode === void) {
						b = false;
					}
					else if (skip) {
						skip = false;
						b = true;
					}
					else {
						cnode = cnode.next;
						b = cnode !== void;
					}
					return b;
				},
				current = () => {
					if (isDisposed) {
						throw __construct_exception_message([nameof(LinkedList_t), nameof(Enumerator_t)], "Enumerator is already disposed");
					}
					return cnode.value;
				},
				dispose = () => {
					cnode = void;
					isDisposed = true;
				}
			};
		};

		// Time complexity O(n/2)
		__find_n = idx => {
			n = void;
			if (idx <= _len / 2) {
				halfLen = _len / 2;
				n = _head;
				i = 0;
				while (i < halfLen) {
					n = n.next;
					i += 1;
				}
			}
			else {
				halfLen = _len / 2;
				n = _tail;
				i = (_len - 1) - idx;
				while (i >= halfLen) {
					n = n.prev;
					i -= 1;
				}
			}
			return n;
		};	

		this = {
			// Returns the node count of the chain
			//
			length = () => _len,

			// Adds provided value to the end of the chain
			//
			add = e => {
				if (_len == 0) {
					n = Node_t(e);
					_head = n;
					_tail = n;
				}
				else {
					n = Node_t(e, _tail, void);
					_tail.next = n;
					_tail = n;
				}
				_len += 1;
			},

			// Returns the value of a node at specified index
			//
			get = idx => {
				if (idx < 0 || idx >= _len) {
					throw __construct_exception_message([nameof(LinkedList_t), nameof(this.get)], "Argument out of range");
				}

				n = void;
				if (idx == 0) {
					n = _head;
				}
				else if (idx == _len - 1) {
					n = _tail;
				}
				else {
					n = __find_n(idx);
				}

				return n.value;
			},

			// Updates value of an existing node
			//
			set = (idx, e) => {
				if (idx < 0 || idx >= _len) {
					throw __construct_exception_message([nameof(LinkedList_t), nameof(this.set)], "Argument out of range");
				}

				n = void;
				if (idx == 0) {
					n = _head;
				}
				else if (idx == _len - 1) {
					n = _tail;
				}
				else {
					n = __find_n(idx);
				}

				n.value = e;
			},

			// Removes a node from chain whose value is strictly equal to the value 
			// of the provided argument.
			// Returns true if the node was found and removed, otherwise
			// returns false.
			//
			remove = e => {
				found = false;
				if (_len > 0) {
					n = _head;
					while (n !== void && !found) {
						if (n.value === e) {
							found = true;
						}
						else {
							n = n.next;
						}
					}
					if (found) {
						if (n === _head) {
							_head = _head.next;
							if (_head !== void) {
								_head.prev = void;
							}
						}
						else if (n === _tail) {
							_tail = _tail.prev;
							if (_tail !== void) {
								_tail.next = void;
							}
						}
						else {
							prev = n.prev;
							next = n.next;

							prev.next = next;
							next.prev = prev;
						}
						_len -= 1;
					}				
				}
				return found;
			},

			// Removes and returns value of node at specified index
			//
			removeAt = idx => {
				if (idx < 0 || idx >= _len) {
					throw __construct_exception_message([nameof(LinkedList_t), nameof(this.removeAt)], "Argument out of range");
				}

				n = void;
				if (idx == 0) {
					n = _head;
					if (_head.next !== void) {
						_head.next.prev = void;
					}
					_head = _head.next;
				}
				else if (idx == _len - 1) {
					n = _tail;
					_tail.prev.next = void;
					_tail = _tail.prev;
				}
				else {
					n = __find_n(idx);
					prev = n.prev;
					next = n.next;

					prev.next = next;
					if (next != void) {
						next.prev = prev;
					}
				}

				_len -= 1;

				return n.value;
			},

			// Inserts provided value as a node at 
			// specified index pushing existing node to the right
			//
			insertAt = (idx, e) => {
				if (idx < 0 || idx > _len) {
					throw __construct_exception_message([nameof(LinkedList_t), nameof(this.insertAt)], "Argument out of range");
				}
				if (_len == 0 && idx == 0) {
					n = Node_t(e);
					n.prev = void;
					n.next = void;
					_head = n;
					_tail = n;
				}
				else if (idx == 0) {
					n = Node_t(e);
					n.prev = void;
					n.next = _head;
					_head.prev = n;
					_head = n;
				}
				else if (idx == _len) {
					n = Node_t(e);
					n.prev = _tail;
					n.next = void;
					_tail.next = n;
					_tail = n;
				}
				else {
					natidx = __find_n(idx);

					n = Node_t(e);
					n.prev = natidx.prev;
					n.next = natidx;

					n.prev.next = n;
					n.next.prev = n;
				}
				_len += 1;
			},

			// Returns true if the chain contains a node whose value is strictly equal
			// to the value provided as an argument
			//
			contains = e => {
				found = false;
				if (_len > 0) {
					n = _head;
					while (n !== void && !found) {
						if (n.value === e) {
							found = true;
						}
						else {
							n = n.next;
						}
					}
				}
				return found;
			},

			// Creates an returns an enumerator that iterates through the chain
			//
			enumerator = () => Enumerator_t(_head),

			// Returns a reference to this list
			//
			toList = () => this,

			toString = (callerList => {
				sb = "[";
				if (_len > 0) {
					it = Enumerator_t(_head);
					i = 0;
					while (it.next()) {
						c = it.current();
						if (c === this) {
							sb += "<circular ref>";
						}
						else if (std.isObject(c) && __is_collections_lib_type(c)) {
							innls = c.toList();
							if (innls.contains(this)) {
								sb += "[...]";
							}
							else {
								sb += c;
							}
						}
						else if (std.isStringObject(c)) {
							sb += ('"' + std.escapeSpecialCharacters(c) + '"');
						}
						else {
							sb += c;
						}
						if (i != _len - 1) {
							sb += ',';
						}
						i += 1;
					} 
				}
				sb += "]";
				return sb;
			}) 
			+ (() => this.toString(this)),

			typeCode = () => __LLIST_TCODE__,

			indexer [idx] => get(idx),

			indexer [idx] <- value => {
				set(idx, value);
			},

			operator self [+] e => {
				self.add(e);
				return self;
			},

			operator self [-] e => {
				if (!self.remove(e)) {
					throw __construct_exception_message([nameof(LinkedList_t), nameof(this.__operator_sub__)], "The provided value was not present in the list");
				}
				return self;
			}
		};

		return this;
	};

	// See docs for LinkedList([0]).
	// Creates a linked list and populates it with initial values.
	//
	LinkedList_t += enumerable => {
		_llist = LinkedList_t();
		foreach (e in enumerable) {
			_llist.add(e);
		}
		return _llist;
	};


	// Stack implementation
	// A dynamic data structure which follows First In, Last Out (FILO) principle
	// dependencies:
	//	LinkedList
	//
	Stack_t = () => {
		_list = LinkedList_t();

		this = {
			// Adds provided value to the top of the stack
			//
			push = e => {
				_list.insertAt(0, e);
			},

			// Removes and returns the top element of the stack
			//
			pop = () => {
				if (_list.length() == 0) {
					throw __construct_exception_message([nameof(Stack_t), nameof(this.pop)], "Stack is empty");
				}
				return _list.removeAt(0);
			},

			// Returns the top value on the stack
			//
			peek = () => {
				if (_list.length() == 0) {
					throw __construct_exception_message([nameof(Stack_t), nameof(this.peek)], "Stack is empty");
				}
				return _list.get(0);
			},

			// Returns true if there are no elements
			// present in the stack, otherwise false
			//
			isEmpty = () => _list.length() == 0,

			// Returns the element count of this stack
			//
			length = _list.length,

			// Creates and returns an enumerator for this stack
			//
			enumerator = _list.enumerator,

			// Returns the underlying enumerable 
			// that makes up this stack
			//
			toList = () => _list,

			//
			toString = () => _list.toString(this),

			typeCode = () => __STACK_TCODE__,

			operator self [+] e => {
				self.push(e);
				return self;
			}
		};

		return this;
	};

	// See docs for Stack([0]).
	// Creates a stack and populates it with initial values.
	//
	Stack_t += enumerable => {
		_stack = Stack_t();
		foreach (e in enumerable) {
			_stack.push(e);
		}
		return _stack;
	};


	// Queue implementation
	// A dynamic data structure which follows First In, First Out (FIFO) principle
	// dependencies:
	//	LinkedList
	//
	Queue_t = () => {
		_list = LinkedList_t();

		this = {
			// Adds the provided element to the end of the queue 
			//
			enqueue = e => {
				_list.add(e);
			},

			// Removes and returns an element from the very beginning of the queue
			//
			dequeue = () => {
				if (_list.length() == 0) {
					throw __construct_exception_message([nameof(Queue_t), nameof(this.dequeue)], "Queue is empty");
				}
				return _list.removeAt(0);
			},

			// Returns an element from the very beginning of the queue
			//
			peek = () => {
				if (_list.length() == 0) {
					throw __construct_exception_message([nameof(Queue_t), nameof(this.peek)], "Queue is empty");
				}
				return _list.get(0);
			},

			// Returns true if there are no elements
			// present in the queue, otherwise false
			//
			isEmpty = () => _list.length() == 0,

			// Returns the element count of this queue
			//
			length = _list.length,

			// Creates and returns an enumerator for this queue
			//
			enumerator = _list.enumerator,

			// Returns the underlying enumerable
			// that makes up this queue
			toList = () => _list,

			toString = () => _list.toString(this),

			typeCode = () => __QUEUE_TCODE__,

			operator self [+] e => {
				self.enqueue(e);
				return self;
			}
 		};

		return this;
	};

	// See docs for Queue([0]).
	// Creates a queue and populates it with initial values.
	//
	Queue_t += enumerable => {
		_queue = Queue_t();
		foreach (e in enumerable) {
			_queue.enqueue(e);
		}
		return _queue;
	};

	// Exports
	return {
		LinkedList 	= LinkedList_t,
		Stack 		= Stack_t,
		Queue 		= Queue_t
	};
} // End __COLLECTIONS_LIB_EXPORTS__

// Export library
Collections = __COLLECTIONS_LIB_EXPORTS__;
Collections = Collections();
