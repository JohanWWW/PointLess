use std;

#const __FILENAME__         "math"
#const __FILENAME_FULL__    "math.0p"
#const __LIB_NAME__         "Math"

#const __N_DECIMAL_TO_INT__ native (value) => <@"std.Convert.decimal.__to_int">
#const __N_INT_TO_DECIMAL__ native (value) => <@"std.Convert.int.__to_decimal">

#const DOT_SYM              "."
#const COLON_SYM            ":"
#const STRING_EMPTY         ""

#const PI                   3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196
#const E                    2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642749193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383
#const NaN                  void

// Begin __MATH_LIB_EXPORTS__
#const __MATH_LIB_EXPORTS__() => {

    dtoi = __N_DECIMAL_TO_INT__;
    itod = __N_INT_TO_DECIMAL__;

    MAKE_EXCEPTION_MSG = (idArr, exceptionMsg) => {
        i = 0;
        len = idArr.length();
        idPath = STRING_EMPTY;
        while (i < len) {
            idPath += idArr[i];
            if (i != len - 1) {
                idPath += DOT_SYM;
            }
            i += 1;
        }
        return idPath + COLON_SYM + " " + exceptionMsg;
    };

    PRIMITIVE_POW = (x, n) => {
        p = 1;
        if (n >= 0) {
            i = n;
            while (i > 0) {
                p *= x;
                i -= 1;
            }
        }
        else {
            p = signum(x) * (1.0 / PRIMITIVE_POW(abs(x), abs(n)));
        }
        return p;
    };

    coef = n => {
        t = NaN;
        if (n == 0) {
            t = 0;
        }
        else {
            t = 1.0 / n;
            if (n % 2 == 0) {
                t = negate(t);
            }
        }
        return t;
    };

    horner = (x) => {
        N = 100;
        u = coef(N);
        i = N - 1;
        while (i >= 0) {
            u = u * x + coef(i);
            i -= 1;
        }
        return u;
    };

    factorial = x => {
        if (x < 0) {
            throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(factorial)], "Attempted to factorialize a negative number");
        }
        p = 1;
        i = x;
        while (i > 0) {
            p *= i;
            i -= 1;
        }
        return p;
    };

    sqrt = x => {
        r = NaN;
        if (x < 0) {
            throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(sqrt)], "No real solution");
        }
        else {
            if (x == 0) {
                r = 0;
            }
            else {
                r = x * .5;
                i = 0;
                while (i < 10) {
                    r = (r + x / r) * .5;
                    i += 1;
                }
            }
        }
        return r;
    };

    negate = x => -1 * x;

    signum = x => x < 0 ? -1 : 1;

    abs = x => x < 0 ? negate(x) : x;

    floor = x => x - (x % 1);

    ceiling = x => 
        x % 1 == 0 ? x : x + (1 - (x % 1));

    max = (a, b) => a >= b ? a : b;

    min = (a, b) => a <= b ? a : b;

    round = (x, scale) => {
        if (scale < 0 || !std.isInteger(scale)) {
            throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(round)], "Scale must be a non negative integer");
        }
        p = pow(10, scale);
        return floor(x * p + .5) / p;
    };

    round += x => round(x, 0);

    truncate = (x, scale) => {
        if (scale < 0 || !std.isInteger(scale)) {
            throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(truncate)], "Scale must be a non negative integer");
        }
        s = 1;
        if (x < 0) {
            s = signum(x);
            x = abs(x);
        }
        p = pow(10, scale);
        return s * floor(x * p) / p;
    };

    truncate += x => truncate(x, 0);

    pow = (x, n) => {
        p = NaN;
        if (std.isInteger(n)) {
            p = PRIMITIVE_POW(x, n);
        }
        else {
            throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(pow)], "Number raised to the power of a decimal is not yet supported");
        }
        return p;
    };

    this_lib = {
        coef = coef,
        horner = horner,
        factorial = factorial,
        sqrt = sqrt,
        negate = negate,
        signum = signum,
        abs = abs,
        floor = floor,
        ceiling = ceiling,
        max = max,
        min = min,
        round = round,
        truncate = truncate,
        pow = pow,

        pi = () => PI,
        e = () => E
    };

    return this_lib;
} // End __MATH_LIB_EXPORTS__

Math = __MATH_LIB_EXPORTS__;
Math = Math();
