
#const __FILENAME__                         "std"
#const __FILENAME_FULL__                    "std.0p"
#const __LIB_NAME__                         "std"

#const __N_ISNUMBER__                       native (value)              => <@"std.__is_number">
#const __N_ISINTEGER__                      native (value)              => <@"std.__is_integer">
#const __N_ISDECIMAL__                      native (value)              => <@"std.__is_decimal">
#const __N_ISSTRINGOBJECT__                 native (value)              => <@"std.__is_string_object">
#const __N_ISCHARACTER__                    native (value)              => <@"std.__is_character">
#const __N_ISBOOL__                         native (value)              => <@"std.__is_bool">
#const __N_ISOBJECT__                       native (value)              => <@"std.__is_object">
#const __N_ISMETHOD__                       native (value)              => <@"std.__is_method">

#const __N_CONSOLE_PRINT__                  native (obj)                => <@"std.print">
#const __N_CONSOLE_PRINTLN__                native (obj)                => <@"std.println">
#const __N_CONSOLE_READLN__                 native ()                   => <@"std.readln">
#const __N_CONSOLE_SETCURSORPOSITION__      native (x, y)               => <@"std.setCursorPosition">
#const __N_CONSOLE_SETCURSORVISIBILITY__    native (visible)            => <@"std.setCursorVisibility">
#const __N_CONSOLE_SETBACKGROUNDCOLOR__     native (color)              => <@"std.setBackgroundColor">

#const __N_DELAY__                          native (millis)             => <@"std.delay">
#const __N_SYSTEMMILLIS__                   native ()                   => <@"std.systemMillis">
#const __N_TICKS__                          native ()                   => <@"std.ticks">

#const __N_GET_MEMBER_NAMES__               native (obj)                => <@"std.getMemberNames">
#const __N_GET_MEMBER_VALUE__               native (obj, name)          => <@"std.getMemberValue">
#const __N_SET_MEMBER_VALUE__               native (obj, name, value)   => <@"std.setMemberValue">
#const __N_CONTAINS_MEMBER__                native (obj, name)          => <@"std.containsMember">

#const __N_GETOVERLOD__						native (method_data, paramc)=> <@"std.getoverlod">
#const __N_OVERLODPSUM__					native (method_data)		=> <@"std.overlodpsum">
#const __N_METHODPCOUNT__					native (method)				=> <@"std.methodpcount">
#const __N_METHODTYPE__						native (method)				=> <@"std.methodtype">
#const __N_METHODIIDX__						native (method)				=> <@"std.methodiidx">
#const __N_BUILDMETHOD__					native (method, type, fbody)=> <@"std.buildmethod">

#const __N_DTDATA__							native (ticks)				=> <@"std.dtdata">

#const __N_CTOI__							native (c)					=> <@"std.ctoi">
#const __N_ITOC__							native (i)					=> <@"std.itoc">
#const __N_CTOB__							native (c)					=> <@"std.ctob">


#const STRING_EMPTY                         ""
#const DOT_SYM                              "."
#const COMMA_SYM                            ","
#const COLON_SYM                            ":"
#const PLUS_SYM                             "+"
#const MINUS_SYM                            "-"

#const TICKS_UNTIL_UNIX_START               621355968000000000 // 0001-00-00 00:00:00 --> 1970-01-01 00:00:00


// Begin __STD_LIB_EXPORTS__
#const __STD_LIB_EXPORTS__() => {

    // Quick way to instantate constants
    NEW = T => T();

    MAKE_EXCEPTION_MSG = (idArr, exceptionMsg) => {
        i = 0;
        len = idArr.length();
        idPath = STRING_EMPTY;
        while (i < len) {
            idPath += idArr[i];
            if (i != len - 1) {
                idPath += DOT_SYM;
            }
            i += 1;
        }
        return idPath + COLON_SYM + " " + exceptionMsg;
    };

    ESCSCHARS = s => {
        if (this_lib.isCharacter(s)) {
            s = "" + s;
        }
        s = s.replaceAll("\\", "\\\\");
        s = s.replaceAll("\"", "\\\"");
        s = s.replaceAll("\n", "\\n");
        s = s.replaceAll("\t", "\\t");
        return s.toString();
    };

    INTPOW = (x, y) => {
        if (y < 0) {
            throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(INTPOW)], "Exponent was less than zero");
        }
        p = 1;
        i = y;
        while (i > 0) {
            p *= x;
            i -= 1;
        }
        return p;
    };

    ctod = {
        ['0'] = 0,
        ['1'] = 1,
        ['2'] = 2,
        ['3'] = 3,
        ['4'] = 4,
        ['5'] = 5,
        ['6'] = 6,
        ['7'] = 7,
        ['8'] = 8,
        ['9'] = 9
    };

    PARSE_INT = (s) => {
        s = s.getChars();
        sum = 0;
        signum = 1;
        e = s.length() - 1;
        i = 0;
        if (s[0] == MINUS_SYM) {
            signum = -1;
            e -= 1;
            i += 1;
        }
        while (i < s.length()) {
            d = s[i];
            if (ctod.contains(d)) {
                sum += ctod[d] * INTPOW(10, e);
            }
            else {
                throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(PARSE_INT)], "Found illegal character '" + d + "' at index " + i + " when parsing input string");
            }
            i += 1;
            e -= 1;
        }

        return signum * sum;
    };

    // TODO: Maybe it should parse string as int and shift decimal point instead?
    PARSE_DECIMAL = (s) => {
        i = 0;
        dotSignCount = 0;
        foreach (c in s) {
            if (c == DOT_SYM) {
                dotSignCount += 1;
            }
            i += 1;
        }

        if (dotSignCount > 1) {
            throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(PARSE_DECIMAL)], "Illegal number format");
        }

        sum = .0;
        hasDecimalPoint = (dotSignCount == 1);

        if (hasDecimalPoint) {
            segments = s.split(DOT_SYM);

            integers = segments[0];
            decimals = segments[1];

            signum = 1;
            if (integers.length() > 0) {
                if (integers[0] == MINUS_SYM) {
                    signum = -1;
                    if (integers.length() > 1) {
                        sum += PARSE_INT(integers.substring(1, integers.length()));
                    }
                }
                else {
                    sum += PARSE_INT(integers);
                }
            }

            decimalSum = .0;
            e = 0;
            while (e < decimals.length()) {
                d = decimals[e];
                if (ctod.contains(d)) {
                    decimalSum += ctod[d] / (INTPOW(10, e) + .0);
                }
                else {
                    throw MAKE_EXCEPTION_MSG([__LIB_NAME__, nameof(PARSE_DECIMAL)], "Found illegal character '" + d + "' at index " + (integers.length() + e + 1) + " when parsing input string");
                }
                e += 1;
            }

            sum += decimalSum / 10;
            sum *= signum;
        }
        else {
            sum += PARSE_INT(s);
        }

        return sum;
    };

    SYSTEMMILLIS = __N_SYSTEMMILLIS__;

    SYSTEMTICKS = () => {
        return SYSTEMMILLIS() * 10000;
    };

    TICKS = __N_TICKS__;

    TICKSUNIX = () => {
        return TICKS() - TICKS_UNTIL_UNIX_START;
    };
    
#const __CONSOLE_COLORS__ {
    BLACK           = b'0,
    DARK_BLUE       = b'1,
    DARK_GREEN      = b'2,
    DARK_CYAN       = b'3,
    DARK_RED        = b'4,
    DARK_MAGENTA    = b'5,
    DARK_YELLOW     = b'6,
    GRAY            = b'7,
    DARK_GRAY       = b'8,
    BLUE            = b'9,
    GREEN           = b'10,
    CYAN            = b'11,
    RED             = b'12,
    MAGENTA         = b'13,
    YELLOW          = b'14,
    WHITE           = b'15
}

#const __CONSOLE__() => {
    // Add println overload
    PRINTLN = __N_CONSOLE_PRINTLN__;
    PRINTLN += () => PRINTLN(STRING_EMPTY);

    return {
        Color = __CONSOLE_COLORS__,
        print = __N_CONSOLE_PRINT__,
        println = PRINTLN,
        readln = __N_CONSOLE_READLN__,
        setCursorPosition = __N_CONSOLE_SETCURSORPOSITION__,
        setCursorVisibility = __N_CONSOLE_SETCURSORVISIBILITY__,
        setBackgroundColor = __N_CONSOLE_SETBACKGROUNDCOLOR__
    };
}

    Arrays = {

        //
        // Allocates storage for a new array and populates it 
        // with the elements from the input enumerable
        //
        from = enumerable => {
            length = enumerable.length();
            array = alloc [length];
            i = 0;
            foreach (e in enumerable) {
                array[i] = e;
                i += 1;
            }
            return array;
        },

        //
        // Allocates storage for a new array
        //
        allocate =  
            //
            // Parameters:
            //  size: The size of the array
            //
            (size => alloc [size]) 
            +

            //
            // Parameters:
            //  size: The size of the array
            //  generator: A provider that returns an initial value to populate the array with
            //
            ((size, generator) => {
                array = Arrays.allocate(size);
                i = 0;
                while (i < size) {
                    array.set(i, generator());
                    i += 1;
                }
                return array;
            }),

        //
        // Allocates storage for new array with zero index positions
        //
        empty = () => alloc [0]
    };


#const ARRAYLIST_DEFAULT_CAPACITY 4
    //
    // Dynamically sized data structure that uses arrays internally.
    // Creates a list with initial values and initial capacity.
    //       enumerable: An initial enumerable used to populate the list
    //  initialCapacity: Initial capacity of this list. Must be greater than
    //                   or equal to the size of the enumerable
    //
    ArrayList_t = (enumerable, initialCapacity) => {

        initArray = () => {
            len = enumerable.length();
            if (initialCapacity < len) {
                throw MAKE_EXCEPTION_MSG([nameof(ArrayList_t)], "Initial capacity cannot be set to a value less than the length of the initial enumerable");
            }
            a = alloc [initialCapacity];
            if (len > 0) {
                i = 0;
                foreach (e in enumerable) {
                    a[i] = e;
                    i += 1;
                }
            }
            return a;
        };

        // Init        
        _size = enumerable.length();
        _array = initArray();

        // ======================================

        //
        // Adds an element to the end of the list
        //
        add = e => {
            ensureCapacity(_size + 1);
            _array[_size] = e;
            _size += 1;
        };

        //
        // Removes element if it is present in the list and is strictly equal to the provided value.
        // Returns true if the element was found and remove otherwise false.
        //  e: The element to remove
        //
        remove = e => {
            found = false;
            i = 0;
            while (i < _size && !found) {
                if (_array[i] === e) {
                    found = true;
                }
                else {
                    i += 1;
                }
            }
            if (found) {
                removeAt(i);
            }
            return found;
        };

        //
        // Removes element at the specified index
        //
        removeAt = index => {
            if (isIndexOutOfRange(index)) {
                throw MAKE_EXCEPTION_MSG([nameof(ArrayList_t), nameof(removeAt)], "Argument out of range");
            }
            removedElement = _array[index];
            if (index == _size - 1) {
                _array[index] = void;
            }
            else {
                i = index;
                while (i < _size) {
                    _array[i] = _array[i + 1];
                    i += 1;
                }
            }
            _size -= 1;
            return removedElement;
        };


        //
        // Inserts value at the specified index
        //
        insertAt = (index, e) => {
            if (index < 0 || index > _size) {
                throw MAKE_EXCEPTION_MSG([nameof(ArrayList_t), nameof(insertAt)], "Argument out of range");
            }
            ensureCapacity(_size + 1);
            if (index == _size) {
                tmp = _array[index];
                _array[index] = e;
                _array[index + 1] = tmp;
            }
            else {
                i = _size;
                while (i > index) {
                    _array[i] = _array[i - 1];
                    i -= 1;
                }
                _array[index] = e;
            }
            _size += 1;
        };

        //
        // Overwrites a value at specified index
        //
        set = (index, e) => {
            if (isIndexOutOfRange(index)) {
                throw MAKE_EXCEPTION_MSG([nameof(ArrayList_t), nameof(set)], "Argument out of range");
            }
            _array[index] = e;
        };

        //
        // Returns element at specified index
        //
        get = index => {
            if (isIndexOutOfRange(index)) {
                throw MAKE_EXCEPTION_MSG([nameof(ArrayList_t), nameof(get)], "Argument out of range");
            }
            return _array[index];
        };

        //
        // Returns true if list contains a value that is strictly equal to the specified value
        // otherwise return false
        //
        contains = e => {
            found = false;
            arrEn = _array.enumerator();
            while (arrEn.next() && !found) {
                if (e === arrEn.current()) {
                    found = true;
                }
            }
            return found;
        };

        //
        // Returns true if the list is empty otherwise return false
        //
        isEmpty = () => _size == 0;

        //
        // Returns an enumerator object for this list
        //
        enumerator = () => {
            i = -1;
            return {
                next = () => {
                    hasNext = i + 1 < _size;
                    if (hasNext) {
                        i += 1;
                    }
                    return hasNext;
                },

                current = () => _array[i],

                dispose = () => { }
            };
        };

        //
        // Creates and returns an array with the list elements
        //
        toArray = () => {
            a = alloc [_size];
            copyArray(_array, a, _size);
            return a;
        };

        //
        // Returns the string representation of this list
        //
        toString = () => {
            i = 0;
            sb = "[";
            while (i < _size) {
                e = _array[i];
                if (e === this) {
                    sb += "<this list>";
                }
                else if (this_lib.isStringObject(e)) {
                    sb += "\"" + this_lib.escschars(e) + "\"";
                }
                else if (this_lib.isCharacter(e)) {
                    sb += "'" + this_lib.escschars(e) + "'";
                }
                else {
                    sb += "" + e;
                }
                if (i != _size - 1) {
                    sb += ",";
                }
                i += 1;
            }
            sb += "]";
            return sb;
        };

        isIndexOutOfRange = index => index < 0 || index >= _size;

        //
        // Ensures that the array size is greater than or equal the provided argument.
        // If the array size is smaller than the argument a new array is allocated
        // and the elements from the previous array are transfered to the new one.
        // The size of the new array might be larger than the argument.
        //  min: The minimum size requirement that the array must meet
        //
        ensureCapacity = min => {
            if (_array.length() < min) {
                newSize = _array.length() * 2;
                if (newSize < min) {
                    newSize = min;
                }
                resizeArray(newSize);
            }
        };

        //
        // Resizes array by allocating a new array with the specified size.
        // The element of the previous array are copied to the new one.
        // Does nothing if the array size is equal to the specified size.
        // This operation truncates an array which can lead to potential data loss. Handle with care!
        //
        resizeArray = size => {
            if (size > _array.length()) {
                newArray = alloc [size];
                copyArray(_array, newArray);
                _array = newArray;
            }
            else if (size < _array.length()) {
                newArray = alloc [size];
                copyArray(_array, newArray, size);
                _array = newArray;
            }
        };

        copyArray = (src, dst) => {
            i = 0;
            while (i < src.length()) {
                dst[i] = src[i];
                i += 1;
            }
        };

        copyArray += (src, dst, count) => {
            i = 0;
            while (i < count) {
                dst[i] = src[i];
                i += 1;
            }
        };

        //
        // Returns the capacity of this list
        //
        capacity = () => _array.length();

        //
        // Sets the capacity of this list.
        // This operation allocates a new array with the specified size but keeping
        // all the elements from the old array.
        //  c: The new capacity 
        //
        capacity += c => {
            if (c < _size) {
                throw MAKE_EXCEPTION_MSG([nameof(ArrayList_t), nameof(capacity)], "Cannot set capacity to a value smaller than list length");
            }
            // Resize if needed
            resizeArray(c);
        };

        this = {
            length = () => _size,
            capacity = capacity,
            add = add,
            remove = remove,
            removeAt = removeAt,
            insertAt = insertAt,
            get = get,
            set = set,
            contains = contains,
            isEmpty = isEmpty,
            enumerator = enumerator,
            toArray = toArray,
            toString = toString,

            //
            // See docs for get
            //
            indexer [index] => get(index),

            //
            // See docs for set
            //
            indexer [index] <- value => {
                set(index, value);
            },

            //
            // See docs for add.
            // Designed to be used with the += operator.
            //
            operator _ [+] e => {
                add(e);
                return this;
            },

            //
            // Removes the specified value from the list.
            // Throws exception if the value was not found.
            // Designed to be used with the -= operator.
            //  value: The value to remove from the list
            //
            operator _ [-] value => {
                if (!remove(value)) {
                    throw MAKE_EXCEPTION_MSG([nameof(ArrayList_t), nameof(this.__operator_sub__)], "Element is not present in the list");
                }
                return this;
            }
        };

        return this;
    };

    //
    // See docs for ArrayList([2]).
    // Creates a list with initial capacity 4 if the provided enumerable is empty
    // otherwise the list capacity is twice the size of the enumerable.
    //
    ArrayList_t += enumerable => 
        ArrayList_t(enumerable, enumerable.length() == 0 ? ARRAYLIST_DEFAULT_CAPACITY : enumerable.length() * 2);

    //
    // See docs for ArrayList([1]).
    // Creates an empty list with capacity 4.
    //
    ArrayList_t += () => ArrayList_t(alloc [0]);

    this_lib = {
        isNumber        = __N_ISNUMBER__,
        isInteger       = __N_ISINTEGER__,
        isDecimal       = __N_ISDECIMAL__,
        isStringObject  = __N_ISSTRINGOBJECT__,
        isCharacter     = __N_ISCHARACTER__,
        isBool          = __N_ISBOOL__,
        isObject        = __N_ISOBJECT__,
        isMethod        = __N_ISMETHOD__,

        getMemberNames  = __N_GET_MEMBER_NAMES__,
        getMemberValue  = __N_GET_MEMBER_VALUE__,
        setMemberValue  = __N_SET_MEMBER_VALUE__,
        containsMember  = __N_CONTAINS_MEMBER__,

        getoverlod      = __N_GETOVERLOD__,
        overlodpsum     = __N_OVERLODPSUM__,
        methodpcount    = __N_METHODPCOUNT__,
        methodtype      = __N_METHODTYPE__,
        methodiidx      = __N_METHODIIDX__,
        buildmethod     = __N_BUILDMETHOD__,

        dtdata          = __N_DTDATA__,

        ctoi            = __N_CTOI__,
        itoc            = __N_ITOC__,
        ctob            = __N_CTOB__,

        parseInt        = PARSE_INT,
        parseDecimal    = PARSE_DECIMAL,

        delay           = __N_DELAY__,
        systemMillis    = __N_SYSTEMMILLIS__,
        systemTicks     = SYSTEMTICKS,
        ticks           = __N_TICKS__,
        ticksUnix       = TICKSUNIX,
        Console         = NEW(__CONSOLE__),
        Arrays          = Arrays,
        ArrayList       = ArrayList_t,

        escschars = ESCSCHARS,
        escapeSpecialCharacters = ESCSCHARS // DEPRECATED
    };

    return this_lib;
} // End __STD_LIB_EXPORTS__

std = __STD_LIB_EXPORTS__;
std = std();
